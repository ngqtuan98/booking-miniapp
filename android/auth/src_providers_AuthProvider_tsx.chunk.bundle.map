{"version":3,"file":"src_providers_AuthProvider_tsx.chunk.bundle","mappings":"iNAAA,kBAEMA,EAAcC,EAAAA,QAAMC,cAAc,CACtCC,OAAQ,WAAO,EACfC,QAAS,WAAO,EAChBC,OAAQ,WAAO,IACd,gBAEiD,UAApC,WAAH,OAASJ,EAAAA,QAAMK,WAAWN,EAAa,C,6GCJ/CO,E,4BAJL,cACA,cACA,WAAoD,YAEpC,SAAXA,GAAAA,EAAW,8BAAXA,EAAW,kBAAXA,EAAW,qBAAXA,IAAAA,EAAW,KAgBhB,IAAMC,EAAU,SAACC,EAAkBC,GACjC,OAAQA,EAAOC,MACb,KAAKJ,EAAYK,cACf,OAAO,OAAP,UACKH,EAAU,CACbI,UAAWH,EAAOI,QAClBC,WAAW,IAEf,KAAKR,EAAYS,QACf,OAAO,OAAP,UACKP,EAAU,CACbI,WAAW,IAEf,KAAKN,EAAYU,SACf,OAAO,OAAP,UACKR,EAAU,CACbI,WAAW,IAEf,QACE,OAAOJ,EAEb,EAkEE,EAhEmB,SAAH,GAIX,IAHLS,EAAQ,EAARA,SAIA,EAA0BjB,EAAAA,QAAMkB,WAAWX,EAAS,CAClDO,WAAW,EACXF,WAAW,IACX,qBAHKO,EAAK,KAAEC,EAAQ,KAKhBC,EAAcrB,EAAAA,QAAMsB,SACxB,iBAAO,CACLpB,QAAM,iBAAE,YACN,UACQqB,EAAAA,QAAYC,OAAOC,eAAe,mBAG1C,CAFE,MAAOC,GAET,CAEAN,EAAS,CAACV,KAAMJ,EAAYS,SAC9B,IAAC,4CACDZ,SAAO,iBAAE,YACP,UACQoB,EAAAA,QAAYC,OAAOG,mBAG3B,CAFE,MAAOD,GAET,CAEAN,EAAS,CAACV,KAAMJ,EAAYU,UAC9B,IAAC,4CACDZ,QAAM,iBAAE,YACN,UACQmB,EAAAA,QAAYC,OAAOC,eAAe,mBAG1C,CAFE,MAAOC,GAET,CAEAN,EAAS,CAACV,KAAMJ,EAAYS,SAC9B,IAAC,6CARM,IAAD,EATC,EATD,CA2BP,GACD,IAmBF,OAhBAf,EAAAA,QAAM4B,WAAU,WACd,IAAkB,EAAZC,GAAY,iBAAG,YACnB,IAAIC,EAEJ,IACEA,QAAkBP,EAAAA,QAAYC,OAAOO,gBAGvC,CAFE,MAAOL,GAET,CAEAN,EAAS,CAACV,KAAMJ,EAAYK,cAAeE,SAAUiB,GACvD,IAAC,WAViB,iCAYlBD,GACF,GAAG,KAGD,SAAC,EAAA9B,YAAYiC,SAAQ,CAACC,MAAOZ,EAAY,SACtCJ,EAASE,IAGhB,EAE4B,W,yIC7G5B,cAEMI,EAAW,mDACfW,UAAY,OAAQ,CAYnB,OAZkB,4CAEnB,WACE,OAAOC,EAAAA,QAAaC,QAAQC,KAAKH,UACnC,GAAC,4BAED,SAAeI,GACb,OAAOH,EAAAA,QAAaI,QAAQF,KAAKH,UAAWI,EAC9C,GAAC,+BAED,WACE,OAAOH,EAAAA,QAAaK,WAAWH,KAAKH,UACtC,KAAC,EAbc,GAAXX,EAeGC,OAAS,IAAID,EAAc,IAAD,EAGpBA,EAAY,W","sources":["webpack:///./src/contexts/AuthContext.ts","webpack:///./src/providers/AuthProvider.tsx","webpack:///./src/services/AuthService.ts"],"sourcesContent":["import React from 'react';\n\nconst AuthContext = React.createContext({\n  signIn: () => {},\n  signOut: () => {},\n  signUp: () => {},\n});\n\nconst useAuth = () => React.useContext(AuthContext);\n\nexport {useAuth, AuthContext};\n","import React from 'react';\nimport AuthService from '../services/AuthService';\nimport {AuthContext} from '../contexts/AuthContext';\n\nenum ActionTypes {\n  RESTORE_TOKEN = 'RESTORE_TOKEN',\n  SIGN_IN = 'SIGN_IN',\n  SIGN_OUT = 'SIGN_OUT',\n}\n\ntype Action = {\n  type: ActionTypes;\n  payload?: any;\n};\n\ntype State = {\n  isLoading: boolean;\n  isSignout: boolean;\n};\n\nconst reducer = (prevState: State, action: Action): State => {\n  switch (action.type) {\n    case ActionTypes.RESTORE_TOKEN:\n      return {\n        ...prevState,\n        isSignout: action.payload,\n        isLoading: false,\n      };\n    case ActionTypes.SIGN_IN:\n      return {\n        ...prevState,\n        isSignout: false,\n      };\n    case ActionTypes.SIGN_OUT:\n      return {\n        ...prevState,\n        isSignout: true,\n      };\n    default:\n      return prevState;\n  }\n};\n\nconst AuthProvider = ({\n  children,\n}: {\n  children: (data: State) => React.ReactNode;\n}) => {\n  const [state, dispatch] = React.useReducer(reducer, {\n    isLoading: false,\n    isSignout: false,\n  });\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: async () => {\n        try {\n          await AuthService.shared.setCredentials('dummy-auth-token');\n        } catch (e) {\n          // Handle error\n        }\n\n        dispatch({type: ActionTypes.SIGN_IN});\n      },\n      signOut: async () => {\n        try {\n          await AuthService.shared.removeCredentials();\n        } catch (e) {\n          // Handle error\n        }\n\n        dispatch({type: ActionTypes.SIGN_OUT});\n      },\n      signUp: async () => {\n        try {\n          await AuthService.shared.setCredentials('dummy-auth-token');\n        } catch (e) {\n          // Handle error\n        }\n\n        dispatch({type: ActionTypes.SIGN_IN});\n      },\n    }),\n    [],\n  );\n\n  React.useEffect(() => {\n    const restoreToken = async () => {\n      let userToken;\n\n      try {\n        userToken = await AuthService.shared.getCredentials();\n      } catch (e) {\n        // Handle error\n      }\n\n      dispatch({type: ActionTypes.RESTORE_TOKEN, payload: !userToken});\n    };\n\n    restoreToken();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      {children(state)}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n","import AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass AuthService {\n  TOKEN_KEY = 'token';\n\n  getCredentials(): Promise<string | null> {\n    return AsyncStorage.getItem(this.TOKEN_KEY);\n  }\n\n  setCredentials(token: string): Promise<void> {\n    return AsyncStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  removeCredentials(): Promise<void> {\n    return AsyncStorage.removeItem(this.TOKEN_KEY);\n  }\n\n  static shared = new AuthService();\n}\n\nexport default AuthService;\n"],"names":["AuthContext","React","createContext","signIn","signOut","signUp","useContext","ActionTypes","reducer","prevState","action","type","RESTORE_TOKEN","isSignout","payload","isLoading","SIGN_IN","SIGN_OUT","children","useReducer","state","dispatch","authContext","useMemo","AuthService","shared","setCredentials","e","removeCredentials","useEffect","restoreToken","userToken","getCredentials","Provider","value","TOKEN_KEY","AsyncStorage","getItem","this","token","setItem","removeItem"],"sourceRoot":""}